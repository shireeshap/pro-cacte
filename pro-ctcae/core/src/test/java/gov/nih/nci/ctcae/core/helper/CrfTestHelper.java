package gov.nih.nci.ctcae.core.helper;

import gov.nih.nci.ctcae.core.domain.*;
import gov.nih.nci.ctcae.core.repository.*;
import gov.nih.nci.ctcae.core.query.ProCtcTermQuery;
import gov.nih.nci.ctcae.core.query.CRFQuery;

import java.util.List;

/**
 * User: Harsh
 * Date: Jun 5, 2009
 * Time: 8:40:02 AM
 */
public class CrfTestHelper {

    private CRFRepository crfRepository;
    private final int numberOfSymptoms = 10;
    private List<ProCtcTerm> proCtcTerms;
    private final String formTitle = "Auto-Generated Form";

    public CrfTestHelper(CRFRepository crfRepository, ProCtcTermRepository proCtcTermRepository) {
        this.crfRepository = crfRepository;
        ProCtcTermQuery query = new ProCtcTermQuery();
        query.filterByCtcTermHavingQuestionsOnly();
        proCtcTerms = (List<ProCtcTerm>) proCtcTermRepository.find(query);
    }

    public void createTestForm() {
        deleteAutoGeneratedForms();
        CRF crf = new CRF();
        firstTab_SelectStudy(crf);
        secondTab_FormBuilder(crf);
        thirdTab_ScheduleTemplate(crf);
        fourthTab_Notifications(crf);
        crfRepository.save(crf);
    }

    private void firstTab_SelectStudy(CRF crf) {
        crf.setStudy(TestDataManager.getStandardStudy());
    }

    private void secondTab_FormBuilder(CRF crf) {
        crf.setTitle(formTitle);
        crf.setCrfVersion("1.0");
        for (int i = 0; i < numberOfSymptoms; i++) {
            crf.addProCtcTerm(proCtcTerms.get(i));
        }
    }

    private void thirdTab_ScheduleTemplate(CRF crf) {
        CRFCycleDefinition defA = new CRFCycleDefinition();
        defA.setCycleLength(14);
        defA.setCycleLengthUnit("Days");
        defA.setRepeatTimes("2");
        defA.setOrder(0);

        CRFCycle cycle1 = new CRFCycle();
        cycle1.setOrder(0);
        cycle1.setCycleDays(",1,8,13");
        defA.addCrfCycle(cycle1);

        CRFCycle cycle2 = new CRFCycle();
        cycle2.setOrder(1);
        cycle2.setCycleDays(",3,8,11");
        defA.addCrfCycle(cycle2);

        crf.addCrfCycleDefinition(defA);

        CRFCycleDefinition defB = new CRFCycleDefinition();
        defB.setCycleLength(21);
        defB.setCycleLengthUnit("Days");
        defB.setRepeatTimes("2");
        defB.setOrder(1);

        CRFCycle cycle3 = new CRFCycle();
        cycle3.setOrder(0);
        cycle3.setCycleDays(",4,10,18,21");
        defB.addCrfCycle(cycle3);

        CRFCycle cycle4 = new CRFCycle();
        cycle4.setOrder(1);
        cycle4.setCycleDays(",5,11,19");
        defB.addCrfCycle(cycle4);

        crf.addCrfCycleDefinition(defB);
    }

    private void fourthTab_Notifications(CRF crf) {

    }

    private void deleteAutoGeneratedForms() {
        CRFQuery query = new CRFQuery();
        query.filterByTitleExactMatch(formTitle);
        List<CRF> crfs = (List<CRF>) crfRepository.find(query);
        for (CRF crf : crfs) {
            crfRepository.delete(crf);
        }
    }

}