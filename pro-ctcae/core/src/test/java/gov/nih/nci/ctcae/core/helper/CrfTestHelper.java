package gov.nih.nci.ctcae.core.helper;

import gov.nih.nci.ctcae.core.domain.*;
import gov.nih.nci.ctcae.core.query.CRFQuery;
import gov.nih.nci.ctcae.core.query.ProCtcTermQuery;
import gov.nih.nci.ctcae.core.repository.secured.CRFRepository;
import gov.nih.nci.ctcae.core.repository.ProCtcTermRepository;
import gov.nih.nci.ctcae.core.repository.GenericRepository;

import java.text.ParseException;
import java.util.Date;
import java.util.List;

/**
 * User: Harsh
 * Date: Jun 5, 2009
 * Time: 8:40:02 AM
 */
public class CrfTestHelper {

    private static final int numberOfSymptoms = 10;
    private static List<ProCtcTerm> proCtcTerms;
    private static final String formTitle = "Auto-Generated Form";
    private static CRFRepository crfRepository;
    private static ProCtcTermRepository proCtcTermRepository;
    private static GenericRepository genericRepository;

    private CrfTestHelper() {

    }

    public static void inititalize() {
        crfRepository = TestDataManager.crfRepository;
        proCtcTermRepository = TestDataManager.proCtcTermRepository;
        genericRepository = TestDataManager.genericRepository;
    }

    public static void createTestForm() throws ParseException {
        deleteAutoGeneratedForms();
        CRF crf = new CRF();
        firstTab_SelectStudy(crf);
        secondTab_FormBuilder(crf);
        thirdTab_ScheduleTemplate(crf);
        fourthTab_Notifications(crf);
        crfRepository.save(crf);
        ParticipantTestHelper.createParticipant("Charlie", "Boon", "1-4", crf.getStudy().getLeadStudySite());
        crf.setEffectiveStartDate(new Date());
        crf = crfRepository.updateStatusToReleased(crf);
        createNotifications(crf);
    }

    private static void createNotifications(CRF crf) {
        createUserNotification(StudyTestHelper.getNonLeadSiteStaffByRole(Role.SITE_CRA).getUser(), crf);
        createUserNotification(StudyTestHelper.getNonLeadSiteStaffByRole(Role.SITE_CRA).getUser(), crf);
    }

    private static void firstTab_SelectStudy(CRF crf) {
        crf.setStudy(StudyTestHelper.getDefaultStudy());
    }

    private static void secondTab_FormBuilder(CRF crf) {
        ProCtcTermQuery query = new ProCtcTermQuery();
        query.filterByCtcTermHavingQuestionsOnly();
        proCtcTerms = (List<ProCtcTerm>) proCtcTermRepository.find(query);
        crf.setTitle(formTitle);
        crf.setCrfVersion("1.0");
        for (int i = 0; i < numberOfSymptoms; i++) {
            crf.addProCtcTerm(proCtcTerms.get(i));
        }
    }

    private static void thirdTab_ScheduleTemplate(CRF crf) {

        CRFCalendar calendar = new CRFCalendar();
        calendar.setRepeatEveryAmount("2");
        calendar.setRepeatEveryUnit("Days");
        calendar.setDueDateAmount("24");
        calendar.setDueDateUnit("Hours");
        calendar.setRepeatUntilAmount("2");
        calendar.setRepeatUntilUnit("Number");

        crf.addCrfCalendar(calendar);

        CRFCycleDefinition defA = new CRFCycleDefinition();
        defA.setCycleLength(14);
        defA.setCycleLengthUnit("Days");
        defA.setRepeatTimes("2");
        defA.setOrder(0);

        CRFCycle cycle1 = new CRFCycle();
        cycle1.setOrder(0);
        cycle1.setCycleDays(",1,8,13");
        defA.addCrfCycle(cycle1);

        CRFCycle cycle2 = new CRFCycle();
        cycle2.setOrder(1);
        cycle2.setCycleDays(",3,8,11");
        defA.addCrfCycle(cycle2);

        crf.addCrfCycleDefinition(defA);

        CRFCycleDefinition defB = new CRFCycleDefinition();
        defB.setCycleLength(21);
        defB.setCycleLengthUnit("Days");
        defB.setRepeatTimes("2");
        defB.setOrder(1);

        CRFCycle cycle3 = new CRFCycle();
        cycle3.setOrder(0);
        cycle3.setCycleDays(",4,10,18,21");
        defB.addCrfCycle(cycle3);

        CRFCycle cycle4 = new CRFCycle();
        cycle4.setOrder(1);
        cycle4.setCycleDays(",5,11,19");
        defB.addCrfCycle(cycle4);

        crf.addCrfCycleDefinition(defB);
    }

    private static void fourthTab_Notifications(CRF crf) {

    }

    private static void deleteAutoGeneratedForms() {
        CRFQuery query = new CRFQuery();
        query.filterByTitleExactMatch(formTitle);
        List<CRF> crfs = (List<CRF>) crfRepository.find(query);
        for (CRF crf : crfs) {
            crfRepository.delete(crf);
        }
    }

    private static Notification createNotification() {
        Notification notification = new Notification();
        notification.setText("<html><head></head><body><table><tr><td><b></b>This is an auto-generated em" +
                "ail from PRO-CTCAE system.</td></tr><tr><td><b>Participant name: </b>test t" +
                "est[12-223]</td></tr><tr><td><b>Participant email: </b>Not specified</td></" +
                "tr><tr><td><b>Participant contact phone: </b>1231231234</td></tr><tr><td><b" +
                ">Study site: </b>Duke University Medical Center</td></tr><tr><td><b>Study: " +
                "</b>Study 5[-1001]</td></tr><tr><td><b>Research nurse: </b>cs2duke cs2duke<" +
                "/td></tr><tr><td><b>Treating physician: </b>cs1duke cs1duke</td></tr></tabl" +
                "e><br>This notification was triggered by following responses: <br><br><tabl" +
                "e border=3D\"1\"><tr><td><b>Symptom</b></td><td><b>Attribute</b></td><td><b>C" +
                "urrent visit (05/12/2009)</b></td><td><b>First visit (05/08/2009)</b></td><" +
                "td><b>Previous visit (05/11/2009)</b></td></tr><tr><td>Pounding or racing h" +
                "eartbeat (palpitations)</td><td>Frequency</td><td>Frequently</td><td>Occasi" +
                "onally</td><td>Almost Constantly</td></tr><tr><td>Pounding or racing heartb" +
                "eat (palpitations)</td><td>Severity</td><td>Severe</td><td>Severe</td><td>V" +
                "ery severe</td></tr><tr><td>Fatigue (tiredness, lack of energy)</td><td>Sev" +
                "erity</td><td>Severe</td><td>None</td><td>Very severe</td></tr><tr><td>Fati" +
                "gue (tiredness, lack of energy)</td><td>Interference</td><td>Very much</td>" +
                "<td></td><td>Very much</td></tr></table></body></html>");
        notification.setDate(new Date());
        return notification;
    }

    private static void createUserNotification(User user, CRF crf) {
        UserNotification userNotification = new UserNotification();
        userNotification.setNew(true);
        userNotification.setUser(user);
        userNotification.setStudy(crf.getStudy());
        userNotification.setParticipant(ParticipantTestHelper.findParticpantByUserName("charlie.boon"));
        Notification notification = createNotification();
        notification.addUserNotification(userNotification);
        genericRepository.save(notification);
    }

}