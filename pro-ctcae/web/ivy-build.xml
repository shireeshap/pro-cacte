<project name="ctcae-web" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="parent.dir" value="${basedir}/.."/>
    <property file="${parent.dir}/build.properties"/>
    <property name="default.selenium" value="selenium"/>


    <!-- Logic that finds the conf to be used while making war -->
    <condition property="webConf" value="distGrid" else="dist">
        <istrue value="false"/>
    </condition>

    <import file="${parent.dir}/common.xml"/>

    <!-- ==============================================================
         target: resolve-dist
     ================================================================== -->
    <target name="resolve-dist" depends="load-ivy"
            description="--> resolve and retrieve dist conf dependencies with ivy">
        <echo message="Executing ${ant.project.name} : resolve-dist on conf : ${webConf}"/>
        <ivy:resolve file="${ivy.file}" conf="${webConf}" haltonfailure="false" settingsRef="ctcae.ivy.instance"/>
        <ivy:retrieve pattern="${war.dir}/WEB-INF/lib/[artifact]-[revision].[ext]" haltonfailure="false"
                      settingsRef="ctcae.ivy.instance"/>
    </target>

    <!-- ==================================================================
         target: init-war
     ======================================================================= -->
    <target name="init-war" description="creates the directories necessary for the exploded war">
        <mkdir dir="${war.dir}"/>
        <mkdir dir="${war.dir}/WEB-INF"/>
        <mkdir dir="${war.dir}/WEB-INF/lib"/>
        <mkdir dir="${war.dir}/WEB-INF/classes"/>
        <mkdir dir="${war.dir}/WEB-INF/classes/META-INF"/>
    </target>

    <!-- =========================================================
         target: clean-war
             Cleans the directory associated to keep exploded ctcae files
     =============================================================-->
    <target name="clean-war">
        <delete dir="${dist.dir}/${war.filename}"/>
        <deltree dir="${war.dir}"/>
    </target>


    <target name="war" depends="clean-war, init-war, resolve-dist">
        <copy-resources src="${classes.dir}" dest="${war.dir}/WEB-INF/classes" filter="false"/>
        <copy-resources src="${main.src}/../webapp" dest="${war.dir}" filter="false"/>

        <war destfile="${dist.dir}/${war.filename}" basedir="${war.dir}"
             webxml="${main.src}/../webapp/WEB-INF/web.xml">
        </war>


    </target>
    <!-- =================================================================
         target : jar
             In addition to the jar responsibility, this will also invoke war
     ======================================================================-->
    <target name="jar" depends="common.jar, war">
        <echo message="Executing jar in ${ant.project.name}"/>
    </target>

    <target name="clover-jar" depends="common.clover-jar, war">
        <echo message="Executing jar in ${ant.project.name}"/>
    </target>
    <target name="clean" depends="common.clean, clean-war, undeploy-ctcae">

    </target>

    <target name="copy-ctcae-context">
        <delete dir="${main.src}/../webapp/WEB-INF/classes"/>
        <delete dir="${main.src}/../webapp/WEB-INF/lib"/>
        <mkdir dir="${main.src}/../webapp/WEB-INF/classes"/>
        <mkdir dir="${main.src}/../webapp/WEB-INF/lib"/>
        <copy-resources src="${classes.dir}" dest="${main.src}/../webapp/WEB-INF/classes" filter="false"/>
        <copy-resources src="${lib.dir}" dest="${main.src}/../webapp/WEB-INF/lib" filter="false"/>
        <echo file="${env.CATALINA_HOME}/conf/Catalina/localhost/ctcae.xml">&lt;Context path="/ctcae"
            docBase="${main.src}/../webapp/" reloadable="true" debug="9" />
        </echo>
    </target>

    <!--=================================================================
         target :undeploy-ctcae
     ==================================================================== -->
    <target name="undeploy-ctcae">
        <delete file="${env.CATALINA_HOME}/conf/Catalina/localhost/ctcae.xml"/>
        <delete dir="${main.src}/../webapp/WEB-INF/classes"/>
        <delete dir="${main.src}/../webapp/WEB-INF/lib"/>
    </target>

    <!--=================================================================
         target :deploy-ctcae
     ==================================================================== -->
    <target name="deploy-ctcae" depends="undeploy-ctcae, compile, copy-ctcae-context"/>

    <target name="TomStart">
        <java jar="${env.CATALINA_HOME}/bin/bootstrap.jar" fork="true">
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
        </java>
    </target>

    <target name="TomStop">
        <java jar="${env.CATALINA_HOME}/bin/bootstrap.jar" fork="true">
            <jvmarg value="-Dcatalina.home=${env.CATALINA_HOME}"/>
            <arg line="stop"/>
        </java>
    </target>


    <!-- ========================================================================
       target: migrate-selenium-data
        Will run the sample data migration for selenium..
   ============================================================================= -->

    <target name="migrate-selenium-data" description="add sample data" depends="find-datasource">
        <taskdef name="dbunit" classname="org.dbunit.ant.DbUnitTask" classpathref="main.classpath"/>
        <property file="${dsFile}"/>
        <echo>add sample data into ${datasource.url}</echo>
        <dbunit classpathRef="main.classpath"
                driver="${datasource.driver}"
                url="${datasource.url}"
                userid="${datasource.username}"
                password="${datasource.password}">
            <operation type="INSERT"
                       src="src/test/resources/gov/nih/nci/ctcae/selenium/testdata/studies-participants.xml"/>
            <operation type="INSERT"
                       src="src/test/resources/gov/nih/nci/ctcae/selenium/testdata/questions.xml"/>
        </dbunit>
    </target>


    <target name="selenium-test" if="run.test" depends="clean-test-results, compile-test,resolve-test"
            description="Runs the selenium testcases">

        <echo message="Executing in ${ant.project.name}"/>
        <echo
                message="Test results dir: ${test.results.dir}, with pattern ${selenium-testPattern} and classes from ${test.classes.dir}"/>
        <mkdir dir="${test.results.dir}"/>

        <echo message="clover path is ${clover.jar}"></echo>

        <junit printsummary="yes" errorproperty="test.failed" failureproperty="test.failed"
               showoutput="true" fork="true" forkmode="once" timeout="600000">

            <classpath refid="test.run.classpath"/>
            <classpath>
                <pathelement path="${clover.jar}"/>
            </classpath>

            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.results.dir}">
                <fileset dir="${test.classes.dir}">
                    <include name="${selenium-testPattern}"/>
                </fileset>
            </batchtest>
        </junit>


    </target>

    <!-- ========================================================================
       target: start-server
        Will start the selenium server..
   ============================================================================= -->

    <target name="start-server">
        <java jar="../tools/selenium/selenium-server.jar" fork="true" failonerror="true"/>
    </target>


    <!-- ========================================================================
       target: stop-server
        Will stop the selenium server..
   ============================================================================= -->

    <target name="stop-server" description="description">
        <echo message="shutdown failed" file="selenium-shutdown-result.txt"/>
        <property file="${seleniumFile}"/>

        <get src="http://${selenium.server.host}:${selenium.server.port}/selenium-server/driver/?cmd=shutDown"
             dest="selenium-shutdown-result.txt"
             ignoreerrors="true"/>
        <loadfile property="selenium.shutdown.results" srcfile="selenium-shutdown-result.txt"/>
        <echo message="selenium shutdown status: ${selenium.shutdown.results}"/>
    </target>


    <!--this is required only for hsql db. Please define selenium properties in databse-specefic.properties file if you are using any other database ...

    so for example. if you want to use firefox with postgress, use -Ddb=fiefox-postgres or use -Ddb=ie-oracle (if you want to use ie on oracle)
    -->

    <!-- The default selenium setting to be used
         can be overriden using -Dselenium=xxxx runtime option.
    -->
    <condition property="seleniumFileConfigurationName" else="${default.selenium}" value="${selenium}">
        <isset property="selenium"/>
    </condition>

    <target name="find-selenium" unless="seleniumFile.loaded" description="Loads the seleniumFile properties">
        <echo message="seleniumFileConfigurationName : ${seleniumFileConfigurationName}"/>
        <condition property="seleniumFile" value="${user.home}/.ctcae/${seleniumFileConfigurationName}.properties"
                   else="/etc/ctcae/${seleniumFileConfigurationName}.properties">
            <available file="${user.home}/.ctcae/${seleniumFileConfigurationName}.properties"/>
        </condition>
        <property name="seleniumFile.loaded" value="true"/>
    </target>

    <!--this is required only for hsql db. Please define selenium properties in databse-specefic.properties file if you are using any other database
    -->


    <target name="migrate-selenium-proeprtis-to-hsql" depends="find-selenium">
        <echo message="Selenium properties File : ${seleniumFileConfigurationName}"/>
        <property file="${seleniumFile}"/>

        <property name="selenium.browser" value="${selenium.browser}"/>
        <property name="selenium.base.url" value="${selenium.base.url}"/>
        <property name="selenium.client.url" value="${selenium.client.url}"/>
        <property name="selenium.wait.time" value="${selenium.wait.time}"/>
        <property name="selenium.server.host" value="${selenium.server.host}"/>
        <property name="selenium.server.port" value="${selenium.server.port}"/>

        <echo message="selenium.browser: ${selenium.browser}"/>
        <echo message="selenium.base.url: ${selenium.base.url}"/>
        <echo message="selenium.client.url: ${selenium.client.url}"/>
        <echo message="selenium.wait.time: ${selenium.wait.time}"/>
        <echo message="selenium.server.host: ${selenium.server.host}"/>
        <echo message="selenium.server.port: ${selenium.server.port}"/>

        <propertyfile file="${user.home}/.ctcae/${create-hsqldb.dbname}.properties"
                      comment="Generated by ProCtcAE's create-hsqldb task">
            <entry key="selenium.browser" value="${selenium.browser}"/>
            <entry key="selenium.base.url" value="${selenium.base.url}"/>
            <entry key="selenium.client.url" value="${selenium.client.url}"/>
            <entry key="selenium.wait.time" value="${selenium.wait.time}"/>
            <entry key="selenium.server.host" value="${selenium.server.host}"/>
            <entry key="selenium.server.port" value="${selenium.server.port}"/>
        </propertyfile>

    </target>


</project>
