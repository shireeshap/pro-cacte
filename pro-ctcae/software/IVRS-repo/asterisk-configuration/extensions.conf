; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=no
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; a Trie to find the best matching pattern is used. In dialplans
; with more than about 20-40 extensions in a single context, this
; new algorithm can provide a noticeable speedup.
; With 50 extensions, the speedup is 1.32x
; with 88 extensions, the speedup is 2.23x
; with 138 extensions, the speedup is 3.44x
; with 238 extensions, the speedup is 5.8x
; with 438 extensions, the speedup is 10.4x
; With 1000 extensions, the speedup is ~25x
; with 10,000 extensions, the speedup is 374x
; Basically, the new algorithm provides a flat response
; time, no matter the number of extensions.
;
; By default, the old pattern matcher is used.
;
; ****This is a new feature! *********************
; The new pattern matcher is for the brave, the bold, and
; the desperate. If you have large dialplans (more than about 50 extensions
; in a context), and/or high call volume, you might consider setting
; this value to "yes" !!
; Please, if you try this out, and are forced to return to the
; old pattern matcher, please report your reasons in a bug report
; on https://issues.asterisk.org. We have made good progress in providing
; something compatible with the old matcher; help us finish the job!
;
; This value can be switched at runtime using the cli command "dialplan set extenpatternmatchnew true"
; or "dialplan set extenpatternmatchnew false", so you can experiment to your hearts content.
;
;extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=no
;
; If priorityjumping is set to 'yes', then applications that support
; 'jumping' to a different priority based on the result of their operations
; will do so (this is backwards compatible behavior with pre-1.2 releases
; of Asterisk). Individual applications can also be requested to do this
; by passing a 'j' option in their arguments.
;
;priorityjumping=yes
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
;userscontext=default
;
; You can include other config files, use the #include command
; (without the ';'). Note that this is different from the "include" command
; that includes contexts within other contexts. The #include command works
; in all asterisk configuration files.
;#include "filename.conf"
;#include <filename.conf>
#include PROCTCAE_Dialplan.conf
#include Record-Test_dialplan.conf
;
; You can execute a program or script that produces config files, and they
; will be inserted where you insert the #exec command. The #exec command
; works on all asterisk configuration files.  However, you will need to
; activate them within asterisk.conf with the "execincludes" option.  They
; are otherwise considered a security risk.
;#exec /opt/bin/build-extra-contexts.sh
;#exec /opt/bin/build-extra-contexts.sh --foo="bar"
;#exec </opt/bin/build-extra-contexts.sh --foo="bar">
;#exec "/opt/bin/build-extra-contexts.sh --foo=\"bar\""
;

; The "Globals" category contains global variables that can be referenced
; in the dialplan with the GLOBAL dialplan function:
; ${GLOBAL(VARIABLE)}
; ${${GLOBAL(VARIABLE)}} or ${text${GLOBAL(VARIABLE)}} or any hybrid
; Unix/Linux environmental variables can be reached with the ENV dialplan
; function: ${ENV(VARIABLE)}
;
[globals]
CONSOLE=Console/dsp				; Console interface for demo
;CONSOLE=DAHDI/1
;CONSOLE=Phone/phone0
IAXINFO=guest					; IAXtel username/password
;IAXINFO=myuser:mypass
TRUNK=DAHDI/G2					; Trunk interface
;
; Note the 'G2' in the TRUNK variable above. It specifies which group (defined
; in chan_dahdi.conf) to dial, i.e. group 2, and how to choose a channel to use
; in the specified group. The four possible options are:
;
; g: select the lowest-numbered non-busy DAHDI channel
;    (aka. ascending sequential hunt group).
; G: select the highest-numbered non-busy DAHDI channel
;    (aka. descending sequential hunt group).
; r: use a round-robin search, starting at the next highest channel than last
;    time (aka. ascending rotary hunt group).
; R: use a round-robin search, starting at the next lowest channel than last
;    time (aka. descending rotary hunt group).
;
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;TRUNK=IAX2/user:pass@provider

;FREENUMDOMAIN=mydomain.com                     ; domain to send on outbound
                                                ; freenum calls (uses outbound-freenum
                                                ; context)

;
; WARNING WARNING WARNING WARNING
; If you load any other extension configuration engine, such as pbx_ael.so,
; your global variables may be overridden by that file.  Please take care to
; use only one location to set global variables, and you will likely save
; yourself a ton of grief.
; WARNING WARNING WARNING WARNING
;
; Any category other than "General" and "Globals" represent
; extension contexts, which are collections of extensions.
;
; Extension names may be numbers, letters, or combinations
; thereof. If an extension name is prefixed by a '_'
; character, it is interpreted as a pattern rather than a
; literal.  In patterns, some characters have special meanings:
;
;   X - any digit from 0-9
;   Z - any digit from 1-9
;   N - any digit from 2-9
;   [1235-9] - any digit in the brackets (in this example, 1,2,3,5,6,7,8,9)
;   . - wildcard, matches anything remaining (e.g. _9011. matches
;	anything starting with 9011 excluding 9011 itself)
;   ! - wildcard, causes the matching process to complete as soon as
;       it can unambiguously determine that no other matches are possible
;
; For example, the extension _NXXXXXX would match normal 7 digit dialings,
; while _1NXXNXXXXXX would represent an area code plus phone number
; preceded by a one.
;
; Each step of an extension is ordered by priority, which must always start
; with 1 to be considered a valid extension.  The priority "next" or "n" means
; the previous priority plus one, regardless of whether the previous priority
; was associated with the current extension or not.  The priority "same" or "s"
; means the same as the previously specified priority, again regardless of
; whether the previous entry was for the same extension.  Priorities may be
; immediately followed by a plus sign and another integer to add that amount
; (most useful with 's' or 'n').  Priorities may then also have an alias, or
; label, in parentheses after their name which can be used in goto situations.
;
; Contexts contain several lines, one for each step of each extension.  One may
; include another context in the current one as well, optionally with a date
; and time.  Included contexts are included in the order they are listed.
; Switches may also be included within a context.  The order of matching within
; a context is always exact extensions, pattern match extensions, includes, and
; switches.  Includes are always processed depth-first.  So for example, if you
; would like a switch "A" to match before context "B", simply put switch "A" in
; an included context "C", where "C" is included in your original context
; before "B".
;
;[context]
;exten => someexten,{priority|label{+|-}offset}[(alias)],application(arg1,arg2,...)
;
; Timing list for includes is
;
;   <time range>,<days of week>,<days of month>,<months>[,<timezone>]
;
; Note that ranges may be specified to wrap around the ends.  Also, minutes are
; fine-grained only down to the closest even minute.
;
;include => daytime,9:00-17:00,mon-fri,*,*
;include => weekend,*,sat-sun,*,*
;include => weeknights,17:02-8:58,mon-fri,*,*
;
; ignorepat can be used to instruct drivers to not cancel dialtone upon receipt
; of a particular pattern.  The most commonly used example is of course '9'
; like this:
;
;ignorepat => 9
;
; so that dialtone remains even after dialing a 9.  Please note that ignorepat
; only works with channels which receive dialtone from the PBX, such as DAHDI,
; Phone, and VPB.  Other channels, such as SIP and MGCP, which generate their
; own dialtone and converse with the PBX only after a number is complete, are
; generally unaffected by ignorepat (unless DISA or another method is used to
; generate a dialtone after answering the channel).
;

;
; Sample entries for extensions.conf
;
;
[dundi-e164-canonical]
;include => stdexten
;
; List canonical entries here
;
;exten => 12564286000,1,Gosub(6000,stdexten(IAX2/foo))
;exten => 12564286000,n,Goto(default,s,1)	; exited Voicemail
;exten => _125642860XX,1,Dial(IAX2/otherbox/${EXTEN:7})

[dundi-e164-customers]
;
; If you are an ITSP or Reseller, list your customers here.
;
;exten => _12564286000,1,Dial(SIP/customer1)
;exten => _12564286001,1,Dial(IAX2/customer2)

[dundi-e164-via-pstn]
;
; If you are freely delivering calls to the PSTN, list them here
;
;exten => _1256428XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Expose all of 256-428
;exten => _1256325XXXX,1,Dial(DAHDI/G2/${EXTEN:7}) ; Ditto for 256-325

[dundi-e164-local]
;
; Context to put your dundi IAX2 or SIP user in for
; full access
;
include => dundi-e164-canonical
include => dundi-e164-customers
include => dundi-e164-via-pstn

[dundi-e164-switch]
;
; Just a wrapper for the switch
;
switch => DUNDi/e164

[dundi-e164-lookup]
;
; Locally to lookup, try looking for a local E.164 solution
; then try DUNDi if we don't have one.
;
include => dundi-e164-local
include => dundi-e164-switch
;
; DUNDi can also be implemented as a Macro instead of using
; the Local channel driver.
;
[macro-dundi-e164]
;
; ARG1 is the extension to Dial
;
; Extension "s" is not a wildcard extension that matches "anything".
; In macros, it is the start extension. In most other cases,
; you have to goto "s" to execute that extension.
;
; For wildcard matches, see above - all pattern matches start with
; an underscore.
exten => s,1,Goto(${ARG1},1)
include => dundi-e164-lookup

;
; Here are the entries you need to participate in the IAXTEL
; call routing system.  Most IAXTEL numbers begin with 1-700, but
; there are exceptions.  For more information, and to sign
; up, please go to www.gnophone.com or www.iaxtel.com
;
[iaxtel700]
exten => _91700XXXXXXX,1,Dial(IAX2/${GLOBAL(IAXINFO)}@iaxtel.com/${EXTEN:1}@iaxtel)

;
; The SWITCH statement permits a server to share the dialplan with
; another server. Use with care: Reciprocal switch statements are not
; allowed (e.g. both A -> B and B -> A), and the switched server needs
; to be on-line or else dialing can be severly delayed.
;
[iaxprovider]
;switch => IAX2/user:[key]@myserver/mycontext

[trunkint]
;
; International long distance through trunk
;
exten => _9011.,1,Macro(dundi-e164,${EXTEN:4})
exten => _9011.,n,Dial(${GLOBAL(TRUNK)}/${FILTER(0-9,${EXTEN:${GLOBAL(TRUNKMSD)}})})

[trunkld]
;
; Long distance context accessed through trunk
;
exten => _91NXXNXXXXXX,1,Macro(dundi-e164,${EXTEN:1})
exten => _91NXXNXXXXXX,n,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunklocal]
;
; Local seven-digit dialing accessed through trunk interface
;
exten => _9NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[trunktollfree]
;
; Long distance context accessed through trunk interface
;
exten => _91800NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91888NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91877NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})
exten => _91866NXXXXXX,1,Dial(${GLOBAL(TRUNK)}/${EXTEN:${GLOBAL(TRUNKMSD)}})

[international]
;
; Master context for international long distance
;
ignorepat => 9
include => longdistance
include => trunkint

[longdistance]
;
; Master context for long distance
;
ignorepat => 9
include => local
include => trunkld

[local]
;
; Master context for local, toll-free, and iaxtel calls only
;
ignorepat => 9
include => default
include => trunklocal
include => iaxtel700
include => trunktollfree
include => iaxprovider

;Include parkedcalls (or the context you define in features conf)
;to enable call parking.
include => parkedcalls
;
; You can use an alternative switch type as well, to resolve
; extensions that are not known here, for example with remote
; IAX switching you transparently get access to the remote
; Asterisk PBX
;
; switch => IAX2/user:password@bigserver/local
;
; An "lswitch" is like a switch but is literal, in that
; variable substitution is not performed at load time
; but is passed to the switch directly (presumably to
; be substituted in the switch routine itself)
;
; lswitch => Loopback/12${EXTEN}@othercontext
;
; An "eswitch" is like a switch but the evaluation of
; variable substitution is performed at runtime before
; being passed to the switch routine.
;
; eswitch => IAX2/context@${CURSERVER}

; The following two contexts are a template to enable the ability to dial
; ISN numbers. For more information about what an ISN number is, please see
; http://www.freenum.org.
;
; This is the dialing hook.  use:
; include => outbound-freenum

[outbound-freenum]
; We'll add more digits as needed. The purpose is to dial things
; like extension numbers at domains (ITAD number) so we're matching
; on lengths of 1 through 6 prior to the separator (the asterisk [*])
;
exten => _X*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)
exten => _XXXXXX*X!,1,Goto(outbound-freenum2,${EXTEN},1)

[outbound-freenum2]
; This is the handler which performs the dialing logic. It is called
; from the [outbound-freenum] context
;
exten => _X!,1,Verbose(2,Performing ISN lookup for ${EXTEN})
same => n,Set(SUFFIX=${CUT(EXTEN,*,2-)})                                ; make sure the suffix is all digits as well
same => n,GotoIf($["${FILTER(0-9,${SUFFIX})}" != "${SUFFIX}"]?fn-CONGESTION,1)
                                                                        ; filter out bad characters per the README-SERIOUSLY.best-practices.txt document
same => n,Set(TIMEOUT(absolute)=10800)
same => n,Set(isnresult=${ENUMLOOKUP(${EXTEN},sip,,1,freenum.org)})     ; perform our lookup with freenum.org
same => n,GotoIf($["${isnresult}" != ""]?from)
same => n,Set(DIALSTATUS=CONGESTION)
same => n,Goto(fn-CONGESTION,1)
same => n(from),Set(SIPFROMUSER=${CALLERID(num)})
same => n,GotoIf($["${GLOBAL(FREENUMDOMAIN)}" = ""]?dial)               ; check if we set the FREENUMDOMAIN global variable in [global]
same => n,Set(SIPFROMDOMAIN=${GLOBAL(FREENUMDOMAIN)})                   ;    if we did set it, then we'll use it for our outbound dialing domain
same => n(dial),Dial(SIP/${isnresult},40)
same => n,Goto(fn-${DIALSTATUS},1)

exten => fn-BUSY,1,Busy()

exten => _f[n]-.,1,NoOp(ISN: ${DIALSTATUS})
same => n,Congestion()

[macro-trunkdial]
;
; Standard trunk dial macro (hangs up on a dialstatus that should
; terminate call)
;   ${ARG1} - What to dial
;
exten => s,1,Dial(${ARG1})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-NOANSWER,1,Hangup
exten => s-BUSY,1,Hangup
exten => _s-.,1,NoOp

[stdexten]
;
; Standard extension subroutine:
;   ${EXTEN} - Extension
;   ${ARG1} - Device(s) to ring
;   ${ARG2} - Optional context in Voicemail (if empty, then "default")
;
; Note that the current version will drop through to the next priority in the
; case of their pressing '#'.  This gives more flexibility in what do to next:
; you can prompt for a new extension, or drop the call, or send them to a
; general delivery mailbox, or...
;
; The use of the LOCAL() function is purely for convenience.  Any variable
; initially declared as LOCAL() will disappear when the innermost Gosub context
; in which it was declared returns.  Note also that you can declare a LOCAL()
; variable on top of an existing variable, and its value will revert to its
; previous value (before being declared as LOCAL()) upon Return.
;
exten => _X.,50000(stdexten),NoOp(Start stdexten)
exten => _X.,n,Set(LOCAL(ext)=${EXTEN})
exten => _X.,n,Set(LOCAL(dev)=${ARG1})
exten => _X.,n,Set(LOCAL(cntx)=${ARG2})

exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
exten => _X.,n,Dial(${dev},20)			; Ring the interface, 20 seconds maximum
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,Voicemail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,NoOp(Finish stdexten NOANSWER)
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,Voicemail(${mbx},b)
						; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,NoOp(Finish stdexten BUSY)
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoicemailMain(${mbx})		; If they press *, send the user into VoicemailMain
exten => a,n,Return()

[stdPrivacyexten]
;
; Standard extension subroutine:
;   ${ARG1} - Extension
;   ${ARG2} - Device(s) to ring
;   ${ARG3} - Optional DONTCALL context name to jump to (assumes the s,1 extension-priority)
;   ${ARG4} - Optional TORTURE context name to jump to (assumes the s,1 extension-priority)`
;   ${ARG5} - Context in voicemail (if empty, then "default")
;
; See above note in stdexten about priority handling on exit.
;
exten => _X.,60000(stdPrivacyexten),NoOp(Start stdPrivacyexten)
exten => _X.,n,Set(LOCAL(ext)=${ARG1})
exten => _X.,n,Set(LOCAL(dev)=${ARG2})
exten => _X.,n,Set(LOCAL(dontcntx)=${ARG3})
exten => _X.,n,Set(LOCAL(tortcntx)=${ARG4})
exten => _X.,n,Set(LOCAL(cntx)=${ARG5})

exten => _X.,n,Set(LOCAL(mbx)="${ext}"$["${cntx}" ? "@${cntx}" :: ""])
exten => _X.,n,Dial(${dev},20,p)			; Ring the interface, 20 seconds maximum, call screening
						; option (or use P for databased call _X.creening)
exten => _X.,n,Goto(stdexten-${DIALSTATUS},1)		; Jump based on status (NOANSWER,BUSY,CHANUNAVAIL,CONGESTION,ANSWER)

exten => stdexten-NOANSWER,1,Voicemail(${mbx},u)	; If unavailable, send to voicemail w/ unavail announce
exten => stdexten-NOANSWER,n,NoOp(Finish stdPrivacyexten NOANSWER)
exten => stdexten-NOANSWER,n,Return()			; If they press #, return to start

exten => stdexten-BUSY,1,Voicemail(${mbx},b)		; If busy, send to voicemail w/ busy announce
exten => stdexten-BUSY,n,NoOp(Finish stdPrivacyexten BUSY)
exten => stdexten-BUSY,n,Return()			; If they press #, return to start

exten => stdexten-DONTCALL,1,Goto(${dontcntx},s,1)	; Callee chose to send this call to a polite "Don't call again" script.

exten => stdexten-TORTURE,1,Goto(${tortcntx},s,1)	; Callee chose to send this call to a telemarketer torture script.

exten => _stde[x]te[n]-.,1,Goto(stdexten-NOANSWER,1)	; Treat anything else as no answer

exten => a,1,VoicemailMain(${mbx})		; If they press *, send the user into VoicemailMain
exten => a,n,Return

[macro-page];
;
; Paging macro:
;
;       Check to see if SIP device is in use and DO NOT PAGE if they are
;
;   ${ARG1} - Device to page

exten => s,1,ChanIsAvail(${ARG1},s)			; s is for ANY call
exten => s,n,GoToIf($[${AVAILSTATUS} = "1"]?autoanswer:fail)
exten => s,n(autoanswer),Set(_ALERT_INFO="RA")			; This is for the PolyComs
exten => s,n,SIPAddHeader(Call-Info: Answer-After=0)	; This is for the Grandstream, Snoms, and Others
exten => s,n,NoOp()					; Add others here and Post on the Wiki!!!!
exten => s,n,Dial(${ARG1})
exten => s,n(fail),Hangup


[demo]
include => stdexten
;
; We start with what to do when a call first comes in.
;
exten => s,1,Wait(1)			; Wait a second, just for fun
exten => s,n,Answer			; Answer the line
exten => s,n,Set(TIMEOUT(digit)=5)	; Set Digit Timeout to 5 seconds
exten => s,n,Set(TIMEOUT(response)=10)	; Set Response Timeout to 10 seconds
exten => s,n(restart),BackGround(demo-congrats)	; Play a congratulatory message
exten => s,n(instruct),BackGround(demo-instruct)	; Play some instructions
exten => s,n,WaitExten			; Wait for an extension to be dialed.

exten => 2,1,BackGround(demo-moreinfo)	; Give some more information.
exten => 2,n,Goto(s,instruct)

exten => 3,1,Set(LANGUAGE()=fr)		; Set language to french
exten => 3,n,Goto(s,restart)		; Start with the congratulations

exten => 1000,1,Goto(default,s,1)
;
; We also create an example user, 1234, who is on the console and has
; voicemail, etc.
;
exten => 1234,1,Playback(transfer,skip)		; "Please hold while..."
					; (but skip if channel is not up)
exten => 1234,n,Gosub(${EXTEN},stdexten(${GLOBAL(CONSOLE)}))
exten => 1234,n,Goto(default,s,1)		; exited Voicemail

exten => 1235,1,Voicemail(1234,u)		; Right to voicemail

exten => 1236,1,Dial(Console/dsp)		; Ring forever
exten => 1236,n,Voicemail(1234,b)		; Unless busy

;
; # for when they're done with the demo
;
exten => #,1,Playback(demo-thanks)	; "Thanks for trying the demo"
exten => #,n,Hangup			; Hang them up.

;
; A timeout and "invalid extension rule"
;
exten => t,1,Goto(#,1)			; If they take too long, give up
exten => i,1,Playback(invalid)		; "That's not valid, try again"

;
; Create an extension, 500, for dialing the
; Asterisk demo.
;
exten => 500,1,Playback(demo-abouttotry); Let them know what's going on
exten => 500,n,Dial(IAX2/guest@pbx.digium.com/s@default)	; Call the Asterisk demo
exten => 500,n,Playback(demo-nogo)	; Couldn't connect to the demo site
exten => 500,n,Goto(s,6)		; Return to the start over message.

;
; Create an extension, 600, for evaluating echo latency.
;
exten => 600,1,Playback(demo-echotest)	; Let them know what's going on
exten => 600,n,Echo			; Do the echo test
exten => 600,n,Playback(demo-echodone)	; Let them know it's over
exten => 600,n,Goto(s,6)		; Start over

;
;	You can use the Macro Page to intercom a individual user
exten => 76245,1,Macro(page,SIP/Grandstream1)
; or if your peernames are the same as extensions
exten => _7XXX,1,Macro(page,SIP/${EXTEN})
;
;
; System Wide Page at extension 7999
;
exten => 7999,1,Set(TIMEOUT(absolute)=60)
exten => 7999,2,Page(Local/Grandstream1@page&Local/Xlite1@page&Local/1234@page/n,d)

; Give voicemail at extension 8500
;
exten => 8500,1,VoicemailMain
exten => 8500,n,Goto(s,6)
;
; Here's what a phone entry would look like (IXJ for example)
;
;exten => 1265,1,Dial(Phone/phone0,15)
;exten => 1265,n,Goto(s,5)

;
;	The page context calls up the page macro that sets variables needed for auto-answer
;	It is in is own context to make calling it from the Page() application as simple as
;	Local/{peername}@page
;
[page]
exten => _X.,1,Macro(page,SIP/${EXTEN})

;[mainmenu]
;
; Example "main menu" context with submenu
;
;exten => s,1,Answer
;exten => s,n,Background(thanks)		; "Thanks for calling press 1 for sales, 2 for support, ..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(submenu,s,1)
;exten => 2,1,Hangup
;include => default
;
;[submenu]
;exten => s,1,Ringing					; Make them comfortable with 2 seconds of ringback
;exten => s,n,Wait,2
;exten => s,n,Background(submenuopts)	; "Thanks for calling the sales department.  Press 1 for steve, 2 for..."
;exten => s,n,WaitExten
;exten => 1,1,Goto(default,steve,1)
;exten => 2,1,Goto(default,mark,2)

[default]
;
; By default we include the demo.  In a production system, you
; probably don't want to have the demo there.
;
include => demo
exten => 1,n,Playback(proctcae/en/welcome)

;For incoming calls
;This extension line will ring SIP
;extension 2001 for 60 seconds then hang up. Modify as necessary to fit your dialplan
exten => s,1,Dial(SIP/2001,60,tr)
exten => s,2,hangup

;For outgoing calls:
;Pattern match for local call plan, use appropriate pattern if on nationwide plan.
exten => _1NXXNXXXXXX,1,dial(SIP/${EXTEN}@sip.broadvoice.com,30)
exten => _1NXXNXXXXXX,2,congestion()
exten => _1NXXNXXXXXX,102,busy()

;[incoming]
;exten => 7039350104,1,Goto(myTest,1,1)

;[outgoing-context]
;exten => _1NXXNXXXXXX,1,dial(SIP/7038538504@sip.broadvoice.com,30,G(myTest^1^1))
;exten => _1NXXNXXXXXX,1,dial(SIP/${EXTEN}@sip.broadvoice.com,30,G(myTest^1^1))
;
; An extension like the one below can be used for FWD, Nikotel, sipgate etc.
; Note that you must have a [sipprovider] section in sip.conf
;
;exten => _41X.,1,Dial(SIP/${FILTER(0-9,${EXTEN:2})}@sipprovider,,r)

; Real extensions would go here. Generally you want real extensions to be
; 4 or 5 digits long (although there is no such requirement) and start with a
; single digit that is fairly large (like 6 or 7) so that you have plenty of
; room to overlap extensions and menu options without conflict.  You can alias
; them with names, too, and use global variables

;exten => 6245,hint,SIP/Grandstream1&SIP/Xlite1(Joe Schmoe) ; Channel hints for presence
;exten => 6245,1,Dial(SIP/Grandstream1,20,rt)	; permit transfer
;exten => 6245,n(dial),Dial(${HINT},20,rtT)	; Use hint as listed
;exten => 6245,n,Voicemail(6245,u)		; Voicemail (unavailable)
;exten => 6245,s+1,Hangup			; s+1, same as n
;exten => 6245,dial+101,Voicemail(6245,b)	; Voicemail (busy)
;exten => 6361,1,Dial(IAX2/JaneDoe,,rm)		; ring without time limit
;exten => 6389,1,Dial(MGCP/aaln/1@192.168.0.14)
;exten => 6390,1,Dial(JINGLE/caller/callee) ; Dial via jingle using labels
;exten => 6391,1,Dial(JINGLE/asterisk@digium.com/mogorman@astjab.org) ;Dial via jingle using asterisk as the transport and calling mogorman.
;exten => 6394,1,Dial(Local/6275/n)		; this will dial ${MARK}

;exten => 6275,1,Gosub(${EXTEN},stdexten(${MARK}))
						; assuming ${MARK} is something like DAHDI/2
;exten => 6275,n,Goto(default,s,1)		; exited Voicemail
;exten => mark,1,Goto(6275,1)			; alias mark to 6275
;exten => 6536,1,Gosub(${EXTEN},stdexten(${WIL}))
						; Ditto for wil
;exten => 6536,n,Goto(default,s,1)		; exited Voicemail
;exten => wil,1,Goto(6236,1)

;If you want to subscribe to the status of a parking space, this is
;how you do it. Subscribe to extension 6600 in sip, and you will see
;the status of the first parking lot with this extensions' help
;exten => 6600,hint,park:701@parkedcalls
;exten => 6600,1,noop
;
; Some other handy things are an extension for checking voicemail via
; voicemailmain
;
;exten => 8500,1,VoicemailMain
;exten => 8500,n,Hangup
;
; Or a conference room (you'll need to edit meetme.conf to enable this room)
;
;exten => 8600,1,Meetme(1234)
;
; Or playing an announcement to the called party, as soon it answers
;
;exten = 8700,1,Dial(${MARK},30,A(/path/to/my/announcemsg))
;

; example of a compartmentalized company called "acme"
;
; this is the context that your incoming IAX/SIP trunk dumps you in...
;[acme-incoming]
;exten => s,1,Wait(1)
;exten => s,n,Answer()
;exten => s,n(menu),Playback(acme/vm-brief-menu)
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include  => acme-extens
;
;exten => i,1,Playback(vm-invalid)
;exten => i,n,Goto(s,exten)			; optionally, transfer to operator
;
;exten => t,1,Goto(s,goodbye)
;
; this is the context our internal SIP hardphones use (see sip.conf)
;
;[acme-internal]
;exten => s,1,Answer()
;exten => s,n(exten),Background(vm-enter-num-to-call)
;exten => s,n,WaitExten(5)
;exten => s,n(goodbye),Playback(vm-goodbye)
;exten => s,n(end),Hangup()
;
;include => trunkint
;include => trunkld
;include => trunklocal
;
;include => acme-extens
;
; you can test what your system sounds like to outside callers by dialing this
;exten => 777,1,DISA(no-password,acme-incoming)
;
; grouping of acme's extensions... never used directly, always included.
;
;[acme-extens]
;include => stdexten
;exten => 111,1,Gosub(111,stdexten(SIP/pete_1,acme))
;exten => 111,n,Goto(s,exten)
;
;exten => 112,1,Gosub(112,stdexten(SIP/nancy_1,acme))
;exten => 112,n,Goto(s,end)
;
; end of acme example

;
; Time context: you can patch this in via the following.
;
; [acme-internal]
; ...
; exten => 777,1,Gosub(time)
; exten => 777,n,Hangup()
;
; ...
; include => time
;
; Note: if you're geographically spread out, you can have SIP extensions
; specify their own local timezone in sip.conf as:
;
; [boi]
; type=friend
; context=acme-internal
; callerid="Boise Ofc. <2083451111>"
; ...
; ; use system-wide default timezone of MST7MDT
;
; [lws]
; type=friend
; context=acme-internal
; callerid="Lewiston Ofc. <2087431111>"
; ...
; setvar=timezone=PST8PDT
;
; "timezone" isn't a 'reserved' name in any way, and other places where
; the timezone is significant (e.g. calls to "SayUnixTime()", etc) will
; require modification as well.  Note that voicemail.conf already has
; a mechanism for timezones.
;

[time]
exten => _X.,30000(time),NoOp(Time: ${EXTEN} ${timezone})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
; the amount of delay is set for English; you may need to adjust this time
; for other languages if there's no pause before the synchronizing beep.
exten => _X.,n,Set(FUTURETIME=$[${EPOCH} + 12])
exten => _X.,n,SayUnixTime(${FUTURETIME},Zulu,HNS)
exten => _X.,n,SayPhonetic(z)
; use the timezone associated with the extension (sip only), or system-wide
; default if one hasn't been set.
exten => _X.,n,SayUnixTime(${FUTURETIME},${timezone},HNS)
exten => _X.,n,Playback(spy-local)
exten => _X.,n,WaitUntil(${FUTURETIME})
exten => _X.,n,Playback(beep)
exten => _X.,n,Return()

;
; ANI context: use in the same way as "time" above
;

[ani]
exten => _X.,40000(ani),NoOp(ANI: ${EXTEN})
exten => _X.,n,Wait(0.25)
exten => _X.,n,Answer()
exten => _X.,n,Playback(vm-from)
exten => _X.,n,SayDigits(${CALLERID(ani)})
exten => _X.,n,Wait(1.25)
exten => _X.,n,SayDigits(${CALLERID(ani)})	; playback again in case of missed digit
exten => _X.,n,Return()

; For more information on applications, just type "core show applications" at your
; friendly Asterisk CLI prompt.
;
; "core show application <command>" will show details of how you
; use that particular application in this file, the dial plan.
; "core show functions" will list all dialplan functions
; "core show function <COMMAND>" will show you more information about
; one function. Remember that function names are UPPER CASE.





[Record-test12]
exten => 1,1,Answer()
exten => 1,n,Record(presentOption1:gsm) 
exten => 1,n,hangup

exten => 2,1,Answer()
exten => 2,n,Record(presentOption2:gsm)
exten => 2,n,hangup

exten => 3,1,Answer()
exten => 3,n,Record(frequencyOption1:gsm) 
exten => 3,n,hangup

exten => 4,1,Answer()
exten => 4,n,Record(frequencyOption2:gsm) 
exten => 4,n,hangup

exten => 5,1,Answer()
exten => 5,n,Record(frequencyOption3:gsm) 
exten => 5,n,hangup

exten => 6,1,Answer()
exten => 6,n,Record(frequencyOption4:gsm) 
exten => 6,n,hangup

exten => 7,1,Answer()
exten => 7,n,Record(frequencyOption5:gsm)
exten => 7,n,hangup

exten => 8,1,Answer()
exten => 8,n,Record(severityOption1:gsm)
exten => 8,n,hangup

exten => 9,1,Answer()
exten => 9,n,Record(severityOption2:gsm)
exten => 9,n,hangup

exten => 10,1,Answer()
exten => 10,n,Record(severityOption3:gsm)
exten => 10,n,hangup

exten => 11,1,Answer()
exten => 11,n,Record(severityOption4:gsm) 
exten => 11,n,hangup

exten => 12,1,Answer()
exten => 12,n,Record(severityOption5:gsm)
exten => 12,n,hangup

exten => 13,1,Answer()
exten => 13,n,Record(interferenceOption1:gsm)
exten => 13,n,hangup

exten => 14,1,Answer()
exten => 14,n,Record(interferenceOption2:gsm) 
exten => 14,n,hangup

exten => 15,1,Answer()
exten => 15,n,Record(interferenceOption3:gsm) 
exten => 15,n,hangup

exten => 16,1,Answer()
exten => 16,n,Record(interferenceOption4:gsm)
exten => 16,n,hangup

exten => 17,1,Answer()
exten => 17,n,Record(interferenceOption5:gsm) 
exten => 17,n,hangup

exten => 18,1,Answer()
exten => 18,n,Record(amountOption1:gsm) 
exten => 18,n,hangup

exten => 19,1,Answer()
exten => 19,n,Record(amountOption2:gsm)
exten => 19,n,hangup

exten => 20,1,Answer()
exten => 20,n,Record(amountOption3:gsm)
exten => 20,n,hangup

exten => 21,1,Answer()
exten => 21,n,Record(amountOption4:gsm)
exten => 21,n,hangup

exten => 22,1,Answer()
exten => 22,n,Record(amountOption5:gsm) 
exten => 22,n,hangup

exten => 23,1,Answer()
exten => 23,n,Record(confirmOrChangeThisAnswerYN:gsm) 
exten => 23,n,hangup

exten => 24,1,Answer()
exten => 24,n,Record(welcome:gsm) 
exten => 24,n,hangup

exten => 25,1,Answer()
exten => 25,n,Record(aboutToFillForm:gsm)
exten => 25,n,hangup

exten => 26,n,Answer()
exten => 26,n,Record(26:gsm)
exten => 26,n,hangup

exten => 27,1,Answer()
exten => 27,n,Record(noMorePreviousQuestionsExist:gsm)
exten => 27,n,hangup

exten => 28,1,Answer()
exten => 28,n,Record(instructions:gsm)
exten => 28,n,hangup

exten => 29,1,Answer()
exten => 29,n,Record(presentOptions:gsm)
exten => 29,n,hangup

exten => 30,1,Answer()
exten => 30,n,Record(frequencyOptions:gsm)
exten => 30,n,hangup

exten => 31,1,Answer()
exten => 31,n,Record(severityOptions:gsm)
exten => 31,n,hangup

exten => 32,1,Answer()
exten => 32,n,Record(interferenceOptions:gsm)
exten => 32,n,hangup

exten => 33,1,Answer()
exten => 33,n,Record(amountOptions:gsm)
exten => 33,n,hangup

exten => 34,1,Answer()
exten => 34,n,Record(recordingInstructions:gsm)
exten => 34,n,hangup

exten => 35,1,Answer()
exten => 35,n,Record(recordAdditionalSymptomInstructions:gsm)
exten => 35,n,hangup

exten => 36,1,Answer()
exten => 36,n,Record(playInstructionOption:gsm)
exten => 36,n,hangup

exten => 37,1,Answer()
exten => 37,n,Record(calloutMessage:gsm)
exten => 37,n,hangup

exten => 38,1,Swift(This text is going to get spoken by the Swift engine to the caller|1000|1) 
exten => 38,n,Swift(my name is gaurav gupta. I work for a company called semanticbits LLC. do you see the flashing lights in front of your eyes.) 
exten => 38,n,hangup

exten => 39,1,Answer()
exten => 39,n,Record(newSurveyMessage:gsm)
exten => 39,n,hangup

exten => 40,1,Answer()
exten => 40,n,Record(inProgressSurveyMessage:gsm)
exten => 40,n,hangup

exten => 41,1,Answer()
exten => 41,n,Record(mandatoryInstructions:gsm)
exten => 41,n,hangup

exten => 42,1,Answer()
exten => 42,n,Record(10minsClip:gsm)
exten => 42,n,hangup

exten => 43,1,Answer()
exten => 43,n,Record(20minsClip:gsm)
exten => 43,n,hangup

exten => 44,1,Answer()
exten => 44,n,Record(30minsClip:gsm)
exten => 44,n,hangup

exten => 45,1,Answer()
exten => 45,n,Record(halfWayDoneMessage:gsm)
exten => 45,n,hangup

exten => 46,n,Answer()
exten => 46,n,Record(30minsClip:wav)
exten => 46,n,hangup

exten => 47,1,Answer()
exten => 47,n,Record(monthlyRecallPeriod:gsm)
exten => 47,n,hangup

exten => 48,1,Answer()
exten => 48,n,Record(calloutMessage:gsm)
exten => 48,n,hangup

exten => 49,1,Answer()
exten => 49,n,Record(incorrectIdOrPin:gsm)
exten => 49,n,hangup

exten => 50,1,Answer()
exten => 50,n,Record(contactAdmin:gsm)
exten => 50,n,hangup

exten => 51,1,Answer()
exten => 51,n,Record(lastTreatmentRecallPeriod:gsm)
exten => 51,n,hangup

exten => 52,1,Answer()
exten => 52,n,Record(languageOption:gsm)
exten => 52,n,hangup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

exten => 62,1,Answer()
exten => 62,n,Record(question8:gsm)
exten => 62,n,hangup

exten => 63,1,Answer()
exten => 63,n,Record(question9:gsm)
exten => 63,n,hangup

exten => 64,1,Answer()
exten => 64,n,Record(question10:gsm)
exten => 64,n,hangup

exten => 65,1,Answer()
exten => 65,n,Record(question11:gsm)
exten => 65,n,hangup

exten => 66,1,Answer()
exten => 66,n,Record(question12:gsm)
exten => 66,n,hangup

exten => 67,1,Answer()
exten => 67,n,Record(question13:gsm)
exten => 67,n,hangup

exten => 68,1,Answer()
exten => 68,n,Record(question23:gsm)
exten => 68,n,hangup

exten => 69,1,Answer()
exten => 69,n,Record(question26:gsm)
exten => 69,n,hangup

exten => 70,1,Answer()
exten => 70,n,Record(question27:gsm)
exten => 70,n,hangup

exten => 71,1,Answer()
exten => 71,n,Record(question34:gsm)
exten => 71,n,hangup

exten => 72,1,Answer()
exten => 72,n,Record(question37:gsm)
exten => 72,n,hangup

exten => 73,1,Answer()
exten => 73,n,Record(question38:gsm)
exten => 73,n,hangup

exten => 74,1,Answer()
exten => 74,n,Record(question57:gsm)
exten => 74,n,hangup

exten => 75,1,Answer()
exten => 75,n,Record(question58:gsm)
exten => 75,n,hangup

exten => 76,1,Answer()
exten => 76,n,Record(question61:gsm)
exten => 76,n,hangup

exten => 77,1,Answer()
exten => 77,n,Record(question68:gsm)
exten => 77,n,hangup

exten => 78,1,Answer()
exten => 78,n,Record(question69:gsm)
exten => 78,n,hangup

exten => 79,1,Answer()
exten => 79,n,Record(question70:gsm)
exten => 79,n,hangup

exten => 80,1,Answer()
exten => 80,n,Record(question71:gsm)
exten => 80,n,hangup

exten => 81,1,Answer()
exten => 81,n,Record(question74:gsm)
exten => 81,n,hangup

exten => 82,1,Answer()
exten => 82,n,Record(question75:gsm)
exten => 82,n,hangup

exten => 83,1,Answer()
exten => 83,n,Record(question77:gsm)
exten => 83,n,hangup

exten => 84,1,Answer()
exten => 84,n,Record(question78:gsm)
exten => 84,n,hangup

exten => 85,1,Answer()
exten => 85,n,Record(question79:gsm)
exten => 85,n,hangup

exten => 86,1,Answer()
exten => 86,n,Record(question88:gsm)
exten => 86,n,hangup

exten => 87,1,Answer()
exten => 87,n,Record(question89:gsm)
exten => 87,n,hangup

exten => 88,1,Answer()
exten => 88,n,Record(question92:gsm)
exten => 88,n,hangup

exten => 89,1,Answer()
exten => 89,n,Record(question93:gsm)
exten => 89,n,hangup

exten => 90,1,Answer()
exten => 90,n,Record(question96:gsm)
exten => 90,n,hangup

exten => 91,1,Answer()
exten => 91,n,Record(question97:gsm)
exten => 91,n,hangup

exten => 92,1,Answer()
exten => 92,n,Record(question98:gsm)
exten => 92,n,hangup

exten => 93,1,Answer()
exten => 93,n,Record(question101:gsm)
exten => 93,n,hangup

exten => 94,1,Answer()
exten => 94,n,Record(question102:gsm)
exten => 94,n,hangup

exten => 95,1,Answer()
exten => 95,n,Record(question119:gsm)
exten => 95,n,hangup

exten => 96,1,Answer()
exten => 96,n,Record(question120:gsm)
exten => 96,n,hangup

exten => 97,1,Answer()
exten => 97,n,Record(question124:gsm)
exten => 97,n,hangup

exten => 98,1,Answer()
exten => 98,n,Record(question125:gsm)
exten => 98,n,hangup

exten => 99,1,Answer()
exten => 99,n,Record(question126:gsm)
exten => 99,n,hangup

exten => 100,1,Answer()
exten => 100,n,Record(question1:gsm)
exten => 100,n,hangup

exten => 101,1,Answer()
exten => 101,n,Record(question2:gsm)
exten => 101,n,hangup

exten => 102,1,Answer()
exten => 102,n,Record(question3:gsm)
exten => 102,n,hangup

exten => 103,1,Answer()
exten => 103,n,Record(question4:gsm)
exten => 103,n,hangup

exten => 104,1,Answer()
exten => 104,n,Record(question5:gsm)
exten => 104,n,hangup

exten => 105,1,Answer()
exten => 105,n,Record(question6:gsm)
exten => 105,n,hangup

exten => 106,1,Answer()
exten => 106,n,Record(question7:gsm)
exten => 106,n,hangup

exten => 107,1,Answer()
exten => 107,n,Record(question14:gsm)
exten => 107,n,hangup

exten => 108,1,Answer()
exten => 108,n,Record(question15:gsm)
exten => 108,n,hangup

exten => 109,1,Answer()
exten => 109,n,Record(question16:gsm)
exten => 109,n,hangup

exten => 110,1,Answer()
exten => 110,n,Record(question17:gsm)
exten => 110,n,hangup

exten => 111,1,Answer()
exten => 111,n,Record(question18:gsm)
exten => 111,n,hangup

exten => 112,1,Answer()
exten => 112,n,Record(question19:gsm)
exten => 112,n,hangup

exten => 113,1,Answer()
exten => 113,n,Record(question20:gsm)
exten => 113,n,hangup

exten => 114,1,Answer()
exten => 114,n,Record(question21:gsm)
exten => 114,n,hangup

exten => 115,1,Answer()
exten => 115,n,Record(question22:gsm)
exten => 115,n,hangup

exten => 116,1,Answer()
exten => 116,n,Record(question24:gsm)
exten => 116,n,hangup

exten => 117,1,Answer()
exten => 117,n,Record(question25:gsm)
exten => 117,n,hangup

exten => 118,1,Answer()
exten => 118,n,Record(question28:gsm)
exten => 118,n,hangup

exten => 119,1,Answer()
exten => 119,n,Record(question29:gsm)
exten => 119,n,hangup

exten => 120,1,Answer()
exten => 120,n,Record(question30:gsm)
exten => 120,n,hangup

exten => 121,1,Answer()
exten => 121,n,Record(question31:gsm)
exten => 121,n,hangup

exten => 122,1,Answer()
exten => 122,n,Record(question32:gsm)
exten => 122,n,hangup

exten => 123,1,Answer()
exten => 123,n,Record(question33:gsm)
exten => 123,n,hangup

exten => 124,1,Answer()
exten => 124,n,Record(question35:gsm)
exten => 124,n,hangup

exten => 125,1,Answer()
exten => 125,n,Record(question36:gsm)
exten => 125,n,hangup

exten => 126,1,Answer()
exten => 126,n,Record(question39:gsm)
exten => 126,n,hangup

exten => 127,1,Answer()
exten => 127,n,Record(question40:gsm)
exten => 127,n,hangup

exten => 128,1,Answer()
exten => 128,n,Record(question41:gsm)
exten => 128,n,hangup

exten => 129,1,Answer()
exten => 129,n,Record(question42:gsm)
exten => 129,n,hangup

exten => 130,1,Answer()
exten => 130,n,Record(question43:gsm)
exten => 130,n,hangup

exten => 131,1,Answer()
exten => 131,n,Record(question44:gsm)
exten => 131,n,hangup

exten => 132,1,Answer()
exten => 132,n,Record(question45:gsm)
exten => 132,n,hangup

exten => 133,1,Answer()
exten => 133,n,Record(question46:gsm)
exten => 133,n,hangup

exten => 134,1,Answer()
exten => 134,n,Record(question47:gsm)
exten => 134,n,hangup

exten => 135,1,Answer()
exten => 135,n,Record(question48:gsm)
exten => 135,n,hangup

exten => 136,1,Answer()
exten => 136,n,Record(question49:gsm)
exten => 136,n,hangup

exten => 137,1,Answer()
exten => 137,n,Record(question50:gsm)
exten => 137,n,hangup

exten => 138,1,Answer()
exten => 138,n,Record(question51:gsm)
exten => 138,n,hangup

exten => 139,1,Answer()
exten => 139,n,Record(question52:gsm)
exten => 139,n,hangup

exten => 140,1,Answer()
exten => 140,n,Record(question53:gsm)
exten => 140,n,hangup

exten => 141,1,Answer()
exten => 141,n,Record(question54:gsm)
exten => 141,n,hangup

exten => 142,1,Answer()
exten => 142,n,Record(question55:gsm)
exten => 142,n,hangup

exten => 143,1,Answer()
exten => 143,n,Record(question56:gsm)
exten => 143,n,hangup

exten => 144,1,Answer()
exten => 144,n,Record(question59:gsm)
exten => 144,n,hangup

exten => 145,1,Answer()
exten => 145,n,Record(question60:gsm)
exten => 145,n,hangup

exten => 146,1,Answer()
exten => 146,n,Record(question62:gsm)
exten => 146,n,hangup

exten => 147,1,Answer()
exten => 147,n,Record(question63:gsm)
exten => 147,n,hangup

exten => 148,1,Answer()
exten => 148,n,Record(question64:gsm)
exten => 148,n,hangup

exten => 149,1,Answer()
exten => 149,n,Record(question65:gsm)
exten => 149,n,hangup

exten => 150,1,Answer()
exten => 150,n,Record(question66:gsm)
exten => 150,n,hangup

exten => 151,1,Answer()
exten => 151,n,Record(question67:gsm)
exten => 151,n,hangup

exten => 152,1,Answer()
exten => 152,n,Record(question72:gsm)
exten => 152,n,hangup

exten => 153,1,Answer()
exten => 153,n,Record(question73:gsm)
exten => 153,n,hangup

exten => 154,1,Answer()
exten => 154,n,Record(question76:gsm)
exten => 154,n,hangup

exten => 155,1,Answer()
exten => 155,n,Record(question80:gsm)
exten => 155,n,hangup

exten => 156,1,Answer()
exten => 156,n,Record(question81:gsm)
exten => 156,n,hangup

exten => 157,1,Answer()
exten => 157,n,Record(question82:gsm)
exten => 157,n,hangup

exten => 158,1,Answer()
exten => 158,n,Record(question83:gsm)
exten => 158,n,hangup

exten => 159,1,Answer()
exten => 159,n,Record(question84:gsm)
exten => 159,n,hangup

exten => 160,1,Answer()
exten => 160,n,Record(question85:gsm)
exten => 160,n,hangup

exten => 161,1,Answer()
exten => 161,n,Record(question86:gsm)
exten => 161,n,hangup

exten => 162,1,Answer()
exten => 162,n,Record(question87:gsm)
exten => 162,n,hangup

exten => 163,1,Answer()
exten => 163,n,Record(question90:gsm)
exten => 163,n,hangup

exten => 164,1,Answer()
exten => 164,n,Record(question91:gsm)
exten => 164,n,hangup

exten => 165,1,Answer()
exten => 165,n,Record(question94:gsm)
exten => 165,n,hangup

exten => 166,1,Answer()
exten => 166,n,Record(question95:gsm)
exten => 166,n,hangup

exten => 167,1,Answer()
exten => 167,n,Record(question99:gsm)
exten => 167,n,hangup

exten => 168,1,Answer()
exten => 168,n,Record(question100:gsm)
exten => 168,n,hangup

exten => 169,1,Answer()
exten => 169,n,Record(question103:gsm)
exten => 169,n,hangup

exten => 170,1,Answer()
exten => 170,n,Record(question104:gsm)
exten => 170,n,hangup

exten => 171,1,Answer()
exten => 171,n,Record(question105:gsm)
exten => 171,n,hangup

exten => 172,1,Answer()
exten => 172,n,Record(question106:gsm)
exten => 172,n,hangup

exten => 173,1,Answer()
exten => 173,n,Record(question107:gsm)
exten => 173,n,hangup

exten => 174,1,Answer()
exten => 174,n,Record(question108:gsm)
exten => 174,n,hangup

exten => 175,1,Answer()
exten => 175,n,Record(question109:gsm)
exten => 175,n,hangup

exten => 176,1,Answer()
exten => 176,n,Record(question110:gsm)
exten => 176,n,hangup

exten => 177,1,Answer()
exten => 177,n,Record(question111:gsm)
exten => 177,n,hangup

exten => 178,1,Answer()
exten => 178,n,Record(question112:gsm)
exten => 178,n,hangup

exten => 179,1,Answer()
exten => 179,n,Record(question113:gsm)
exten => 179,n,hangup

exten => 180,1,Answer()
exten => 180,n,Record(question114:gsm)
exten => 180,n,hangup

exten => 181,1,Answer()
exten => 181,n,Record(question115:gsm)
exten => 181,n,hangup

exten => 182,1,Answer()
exten => 182,n,Record(question116:gsm)
exten => 182,n,hangup

exten => 183,1,Answer()
exten => 183,n,Record(question117:gsm)
exten => 183,n,hangup

exten => 184,1,Answer()
exten => 184,n,Record(question118:gsm)
exten => 184,n,hangup

exten => 185,1,Answer()
exten => 185,n,Record(question121:gsm)
exten => 185,n,hangup

exten => 186,1,Answer()
exten => 186,n,Record(question122:gsm)
exten => 186,n,hangup

exten => 187,1,Answer()
exten => 187,n,Record(question123:gsm)
exten => 187,n,hangup

;;;;;;;;;;; core symptoms ;;;;;;;;;

exten => 188,1,Answer()
exten => 188,n,Record(cs_vomiting:gsm)
exten => 188,n,hangup

exten => 189,1,Answer()
exten => 189,n,Record(cs_tasting_problem:gsm)
exten => 189,n,hangup

exten => 190,1,Answer()
exten => 190,n,Record(cs_shortness_breath:gsm)
exten => 190,n,hangup

exten => 191,1,Answer()
exten => 191,n,Record(cs_sad_feelings:gsm)
exten => 191,n,hangup

exten => 192,1,Answer()
exten => 192,n,Record(cs_rash:gsm)
exten => 192,n,hangup

exten => 193,1,Answer()
exten => 193,n,Record(cs_pain:gsm)
exten => 193,n,hangup

exten => 194,1,Answer()
exten => 194,n,Record(cs_numbness:gsm)
exten => 194,n,hangup

exten => 195,1,Answer()
exten => 195,n,Record(cs_nausea:gsm)
exten => 195,n,hangup

exten => 196,1,Answer()
exten => 196,n,Record(cs_mouth_throat_sores:gsm)
exten => 196,n,hangup

exten => 197,1,Answer()
exten => 197,n,Record(cs_loose_watery:gsm)
exten => 197,n,hangup

exten => 198,1,Answer()
exten => 198,n,Record(cs_insomnia:gsm)
exten => 198,n,hangup

exten => 199,1,Answer()
exten => 199,n,Record(cs_headache:gsm)
exten => 199,n,hangup

exten => 200,1,Answer()
exten => 200,n,Record(cs_fatigue:gsm)
exten => 200,n,hangup

exten => 201,1,Answer()
exten => 201,n,Record(cs_dry_mouth:gsm)
exten => 201,n,hangup

exten => 202,1,Answer()
exten => 202,n,Record(cs_decreased_appetite:gsm)
exten => 202,n,hangup

exten => 203,1,Answer()
exten => 203,n,Record(cs_constipation:gsm)
exten => 203,n,hangup

exten => 204,1,Answer()
exten => 204,n,Record(cs_concentration_problem:gsm)
exten => 204,n,hangup

exten => 205,1,Answer()
exten => 205,n,Record(cs_arm_leg_swelling:gsm)
exten => 205,n,hangup

exten => 206,1,Answer()
exten => 206,n,Record(cs_anxiety:gsm)
exten => 206,n,hangup

exten => 207,1,Answer()
exten => 207,n,Record(coreSymptomInstructionsMessage:gsm)
exten => 207,n,hangup

exten => 208,1,Answer()
exten => 208,n,Record(askCallerId:gsm)
exten => 208,n,hangup

exten => 209,1,Answer()
exten => 209,n,Record(askCallerPin:gsm)
exten => 209,n,hangup

exten => 210,1,Answer()
exten => 210,n,Record(askForFormSubmission:gsm)
exten => 210,n,hangup

exten => 211,1,Answer()
exten => 211,n,Record(invalidOption:gsm)
exten => 211,n,hangup

exten => 212,1,Answer()
exten => 212,n,Record(noFormsAvailable:gsm)
exten => 212,n,hangup

exten => 213,1,Answer()
exten => 213,n,Record(sorryCouldNotHear:gsm)
exten => 213,n,hangup

exten => 214,1,Answer()
exten => 214,n,Record(spanishSupport:gsm)
exten => 214,n,hangup

exten => 215,1,Answer()
exten => 215,n,Record(technicalIssue:gsm)
exten => 215,n,hangup

exten => 216,1,Answer()
exten => 216,n,Record(thankyou:gsm)
exten => 216,n,hangup

exten => 217,1,Answer()
exten => 217,n,Record(tryLater:gsm)
exten => 217,n,hangup




































